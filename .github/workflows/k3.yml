name: build k3
#┌───────────── minute (0 - 59)
#│ ┌───────────── hour (0 - 23)
#│ │ ┌───────────── day of the month (1 - 31)
#│ │ │ ┌───────────── month (1 - 12 or JAN-DEC)
#│ │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)
#│ │ │ │ │
#│ │ │ │ │
#│ │ │ │ │
#* * * * *
on:
  schedule:
    - cron: 0 0 1 * *
  push:
    tags:
      - "v*"
jobs:
  build_luci:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          ref: master
          fetch-depth: 0
          lfs: true
      - name: set git identity
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
      - name: space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: bash ./install_ev.sh

      - name: load latest version
        run: bash ./common_load_lastest_version.sh
      - name: update feeds
        run: |
          ./tmp/lede/scripts/feeds update -a
          ./tmp/lede/scripts/feeds install -a
      - name: generate configuration file for k3
        run: |
          cp common.config ./tmp/lede/common.cfg
          cd ./tmp/lede
          rm -f ./.config*
          touch ./.config
          #
          # build k3
          cat >> .config <<EOF
          CONFIG_TARGET_bcm53xx=y
          CONFIG_TARGET_bcm53xx_generic=y
          CONFIG_TARGET_bcm53xx_generic_DEVICE_phicomm-k3=y
          #
          # Extra package
          CONFIG_PACKAGE_automount=y
          CONFIG_PACKAGE_autosamba=y
          #
          # 3. Applications
          #
          CONFIG_PACKAGE_wpad-openssl=y
          CONFIG_PACKAGE_luci-app-aria2=y
          CONFIG_PACKAGE_luci-app-baidupcs-web=y
          CONFIG_PACKAGE_luci-app-familycloud=y
          CONFIG_PACKAGE_luci-app-k3screenctrl=y
          CONFIG_PACKAGE_luci-app-usb-printer=y
          EOF
          cat common.cfg >> ./.config
          sed -i 's/^[ \t]*//g' ./.config
          make defconfig
      - name: make download
        run: |
          cd ./tmp/lede
          make download -j8 || make download -j1 V=s
          rm -rf $(find ./dl/ -size -1024c)
          df -h
      - name: compile firmware
        run: |
          cd ./tmp/lede
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h ./ --max-depth=1
          du -h /mnt/openwrt/ --max-depth=1 || true
      - name: prepare artifact
        run: |
          cd ./tmp/lede
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f -name "*phicomm-k3-squashfs.trx") ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
          echo "::set-output name=buildTime::$(date '+%Y%m%d-%H%M%S')"
      - name: deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo
          path: ./tmp/lede/artifact/buildinfo/

      - name: deliver package
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_package
          path: ./tmp/lede/artifact/package/

      - name: deliver firmware
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_firmware
          path: ./tmp/lede/bin/targets/
      - name: create release and upload asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: tmp/lede/artifact/firmware/*
          file_glob: true
          tag: "v0.0.1"
          overwrite: true
          body: |
            [bot] automatically publish packages compiled with the latest source code
            [bot] this tag will always be up to date
            [bot] latest build time : ${{ steps.date.outputs.buildTime }}
